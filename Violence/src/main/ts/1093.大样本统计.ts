/*
 * @lc app=leetcode.cn id=1093 lang=typescript
 *
 * [1093] 大样本统计
 *
 * https://leetcode.cn/problems/statistics-from-a-large-sample/description/
 *
 * algorithms
 * Medium (36.14%)
 * Likes:    69
 * Dislikes: 0
 * Total Accepted:    16.2K
 * Total Submissions: 38.6K
 * Testcase Example:  '[0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]'
 *
 * 我们对 0 到 255 之间的整数进行采样，并将结果存储在数组 count 中：count[k] 就是整数 k 在样本中出现的次数。
 * 
 * 计算以下统计数据:
 * 
 * 
 * minimum ：样本中的最小元素。
 * maximum ：样品中的最大元素。
 * mean ：样本的平均值，计算为所有元素的总和除以元素总数。
 * median ：
 * 
 * 如果样本的元素个数是奇数，那么一旦样本排序后，中位数 median 就是中间的元素。
 * 如果样本中有偶数个元素，那么中位数median 就是样本排序后中间两个元素的平均值。
 * 
 * 
 * mode ：样本中出现次数最多的数字。保众数是 唯一 的。
 * 
 * 
 * 以浮点数数组的形式返回样本的统计信息 [minimum, maximum, mean, median, mode] 。与真实答案误差在 10^-5
 * 内的答案都可以通过。
 * 
 * 
 * 
 * 示例 1：
 * 
 * 
 * 输入：count =
 * [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
 * 输出：[1.00000,3.00000,2.37500,2.50000,3.00000]
 * 解释：用count表示的样本为[1,2,2,2,3,3,3,3]。
 * 最小值和最大值分别为1和3。
 * 均值是(1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375。
 * 因为样本的大小是偶数，所以中位数是中间两个元素2和3的平均值，也就是2.5。
 * 众数为3，因为它在样本中出现的次数最多。
 * 
 * 示例 2：
 * 
 * 
 * 输入：count =
 * [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
 * 输出：[1.00000,4.00000,2.18182,2.00000,1.00000]
 * 解释：用count表示的样本为[1,1,1,1,2,2,3,3,3,4,4]。
 * 最小值为1，最大值为4。
 * 平均数是(1+1+1+1+2+2+2+3+3+4+4)/ 11 = 24 / 11 =
 * 2.18181818…(为了显示，输出显示了整数2.18182)。
 * 因为样本的大小是奇数，所以中值是中间元素2。
 * 众数为1，因为它在样本中出现的次数最多。
 * 
 * 
 * 
 * 
 * 提示：
 * 
 * 
 * count.length == 256
 * 0 <= count[i] <= 10^9
 * 1 <= sum(count) <= 10^9
 * count 的众数是 唯一 的
 * 
 * 
 */

// @lc code=start
function sampleStats(count: number[]): number[] {
    const ans: number[] = [266, 0, 0, 0, 0];
    let sum = 0;
    let cnt = 0;
    let mode_cnt = 0;
    for (let i = 0; i < count.length; i++) {
        const c = count[i];
        // console.log(c, ans)
        if (c > mode_cnt) {
            mode_cnt = c;
            ans[4] = i;
        }
        if (c > 0) {
            ans[1] = i;
            ans[0] = Math.min(ans[0], i);
        }
        sum += i * c;
        cnt += c;
    }
    ans[2] = sum / cnt;

    const idx = Math.floor(cnt / 2);
    // console.log(cnt, idx, "$$$$$$");
    let ct = 0;
    let a = -1;
    let b = -1;
    // console.log(idx);
    for (let i = 0; i < count.length; i++) {
        // console.log(a, b, "8888");
        const c = count[i];
        if (c > 0) {
            ct += c;
            if (cnt % 2 == 0) {
                if (ct >= idx && a == -1) {
                    a = i;
                }
                if (ct >= idx + 1 && b == -1) {
                    b = i;
                }
                // console.log(a, b, "----");
            } else {
                console.log(i, ct, "---------");
                if (ct >= idx + 1 && a == -1) {
                    a = i;
                }
            }
            // console.log(ct, "++++");
        }
    }
    console.log(a, b, cnt);
    if (b == -1) {
        ans[3] = a;
    } else {
        ans[3] = (a + b) / 2;
    }
    // ans[3] = (a + Math.max(b, 0)) / 2;
    return ans

};
// @lc code=end

// let count = [0, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
// let count = [3762473, 3610981, 1694545, 1248338, 626190, 2239214, 657103, 1384365, 220926, 3443072, 1036980, 2115842, 2632280, 278716, 617405, 763111, 590414, 2714109, 1150780, 3789426, 605271, 1449115, 2074937, 999192, 3427271, 2852749, 3347803, 226999, 2947952, 1236373, 1048498, 3285476, 3398222, 1908160, 1409049, 1530939, 1614256, 184708, 3533732, 1778307, 932668, 1955183, 254572, 2676121, 2047399, 1634957, 928984, 1912459, 2028188, 132117, 509483, 3131014, 2067487, 249673, 2892393, 703458, 1013436, 1742862, 3128136, 1111847, 576070, 2144842, 3307286, 2171658, 3121613, 1273764, 1683840, 3115402, 2816694, 972619, 2868830, 1352598, 2777617, 1978415, 3134383, 3530828, 2658925, 2361992, 903884, 2204140, 3687717, 2573657, 2868354, 3847815, 3438717, 676005, 1965658, 2995658, 796109, 359970, 1112455, 2086423, 2794750, 238100, 792857, 2255830, 2448596, 3236186, 2496911, 2267820, 44841, 3854531, 773478, 2898745, 82646, 1627479, 1185136, 177432, 359151, 454326, 2811490, 487022, 2266630, 2971079, 1176879, 1529122, 784672, 250178, 926021, 1235657, 2585171, 2491198, 2195173, 824041, 3214752, 1267245, 1652699, 152157, 2495456, 1284100, 1820895, 514465, 1975045, 1158932, 3582944, 2617771, 1444960, 415960, 513278, 2426218, 923557, 531108, 1273916, 2255105, 1817597, 533393, 3072427, 3215561, 1176768, 3456139, 3630128, 109716, 376615, 3697610, 2524028, 3357751, 2975275, 2451474, 1059390, 3447356, 2218822, 3417441, 423794, 1013930, 3737113, 407725, 1613411, 472595, 3375279, 1924066, 1883804, 2514494, 697212, 1142131, 425993, 1974814, 1262145, 1619498, 1032745, 3387670, 2794191, 3317958, 2211390, 289326, 1096577, 742042, 246057, 3638186, 1400756, 2033082, 3345591, 1429188, 1239343, 1457596, 3020143, 641680, 2370793, 49339, 3594528, 2932312, 3187962, 104222, 192318, 2785810, 247973, 3342741, 2454471, 3125342, 1810289, 1175359, 3020867, 2078894, 1154200, 198159, 2954503, 2536520, 1478453, 1631053, 196758, 2527455, 1783699, 2858174, 2344466, 2652979, 510767, 2712356, 2280832, 1102193, 1173534, 2036342, 208812, 2952919, 3046003, 345410, 3821238, 59840, 1116144, 2962274, 617710, 2503867, 2279037, 691438, 2836601, 1926862, 2324514, 1197145, 2097625, 2302860, 3520633, 1627373, 2545543, 154577, 291066, 331696, 2570416, 1146764]
let count = [0, 4, 3, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

let n = count.length;
// console.log(n, "000")
let r = sampleStats(count);
// console.log(r);


// 325953605
// 234164205